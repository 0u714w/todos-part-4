{"version":3,"sources":["components/Todoitem.jsx","components/Todolist.jsx","App.js","serviceWorker.js","components/reducer.js","store.js","components/actions.js","index.js"],"names":["ToDoItem","react_default","a","createElement","className","this","props","completed","type","defaultChecked","onClick","handleCompletedTodo","title","handleDeleteTodo","Component","ToDoList","_this","todos","map","todo","Todoitem","id","App","state","todolist","handleDeleteCompletedTodos","event","newTodos","filter","setState","todoIdThatWasClicked","idUserClicked","addNewTodo","slice","keyCode","newTodo","userId","Math","floor","random","target","value","push","_this2","placeholder","autoFocus","onKeyDown","Switch","Route","path","exact","render","Todolist","Link","to","withRouter","connect","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","concat","userdID","text","item","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7320c3d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass ToDoItem extends Component {\n    render() {\n      return (\n        <li className={this.props.completed ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              className=\"toggle\"\n              type=\"checkbox\"\n              defaultChecked={this.props.completed}\n              onClick={this.props.handleCompletedTodo}\n            />\n            <label>{this.props.title}</label>\n            <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n          </div>\n        </li>\n      );\n    }\n  }\n\n  export default ToDoItem;","import React, { Component } from 'react';\nimport ToDoItem from './Todoitem.jsx';\n\n\nclass ToDoList extends Component {\n    render() {\n      return <ul className=\"todo-list\">{this.props.todos.map(todo => (\n        <ToDoItem\n          title={todo.title}\n          completed={todo.completed}\n          handleCompletedTodo={this.props.handleCompletedTodo(todo.id)}\n          handleDeleteTodo={this.props.handleDeleteTodo(todo.id)}\n        />\n      ))}</ul>;\n    }\n  }\n\n  export default ToDoList;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport todolist from \"./todos.json\";\nimport ToDoList from \"./components/Todolist.jsx\";\nimport { withRouter, Link, Route, Switch } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\n\n\nclass App extends Component {\n  state = { todos: todolist };\n\n  handleDeleteCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleDeleteTodo = todoIdThatWasClicked => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === todoIdThatWasClicked) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleCompletedTodo = idUserClicked => event => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === idUserClicked) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  addNewTodo = event => {\n    const newTodos = this.state.todos.slice(0);\n    if (event.keyCode === 13) {\n      const newTodo = {\n        userId: 1,\n        id: Math.floor(Math.random() * 1000) + 1,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newTodo);\n      this.setState({\n        todos: newTodos\n      });\n      event.target.value = \"\";\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.addNewTodo}\n          />\n        </header>\n        <section className=\"main\">\n        <Switch>\n          <Route path=\"/\"\n          exact\n          render={(props) => <ToDoList \n            todos={this.state.todos}\n            handleCompletedTodo={this.handleCompletedTodo}\n            handleDeleteTodo={this.handleDeleteTodo}>\n              \n            </ToDoList> }/>\n\n            <Route path=\"/active\"\n          render={(props) => <ToDoList \n            todos={this.state.todos.filter(todo => !todo.completed)}\n            handleCompletedTodo={this.handleCompletedTodo}\n            handleDeleteTodo={this.handleDeleteTodo}>\n              \n            </ToDoList> }/>\n\n            <Route path=\"/completed\"\n          render={(props) => <ToDoList \n            todos={this.state.todos.filter(todo => todo.completed)}\n            handleCompletedTodo={this.handleCompletedTodo}\n            handleDeleteTodo={this.handleDeleteTodo}>\n              \n            </ToDoList> }/>\n          \n\n            </Switch>\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <Link to=\"/\"> All</Link>\n            </li>\n            <li>\n              <Link to=\"/active\"> Active</Link>\n            </li>\n            <li>\n              <Link to=\"/completed\"> Completed</Link>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.handleDeleteCompletedTodos}\n          >\n            Clear Completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    todos: state.todos\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TODO, MARK_COMPLETE, DELETE_TODO, CLEAR_COMPLETED, ACTIVE} from '../components/actions';\nimport todos from '../todos.json';\nimport { combineReducers } from 'redux';\n\nconst initialState = { todos };\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case ADD_TODO:\n        return {\n            ...state,\n            todos: [\n                ...state.todos, {\n                    userdID: 1,\n                    id: (state.todos.length + 1),\n                    title: action.text,\n                    completed: false\n                }\n            ]\n        }\n        case MARK_COMPLETE:\n        return {\n            ...state,\n            todos: [\n                ...state.todos.map[(todo => todo.id === action.id) ? {\n                    ...todos,\n                    completed: !todos.completed\n                } : todos ]\n            ]\n        }\n        case DELETE_TODO:\n        return {\n            ...state,\n            todos: [\n                ...state.todos.filter(item => item.completed === false)\n            ]\n        }\n        case ACTIVE:\n        return {\n            ...state,\n            todos: [\n                ...state.todos.filter(item => item.completed === false)\n            ]\n        }\n        default:\n        return state;\n    }\n\n}\n\n","import { createStore } from 'redux'\nimport reducer from './components/reducer.js'\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\n\nexport default store;","export const ADD_TODO = \"ADD_TODO\";\nexport const MARK_COMPLETE = \"MARK_COMPLETE\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED = \"CLEAR_COMPLETED\";\nexport const ACTIVE = \"ACTIVE\";\n\nexport const addTodo = (text) => {\n    return {\n        type: ADD_TODO,\n        text\n    }\n}\n\nexport const markComplete = (id) => {\n    return {\n        type: MARK_COMPLETE,\n        id\n    }\n}\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        id\n    }\n}\n\nexport const clearCompleted = () => {\n    return {\n        type: CLEAR_COMPLETED,\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(<Provider store={store}><BrowserRouter><App /></BrowserRouter></Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}